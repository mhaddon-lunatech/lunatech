language: bash
sudo: required

# This moves Kubernetes specific config files.
env:
- CHANGE_MINIKUBE_NONE_USER=true

before_script:
- docker build lunatech-apps-docker/airport -t shahabshahab2/airport-apiserver:1.0.1
- docker build lunatech-apps-docker/airport -f Dockerfile.1.1.0 -t shahabshahab2/airport-apiserver:1.1.0
- docker build lunatech-apps-docker/country -t shahabshahab2/country-apiserver:1.0.1
- docker push shahabshahab2/airport-apiserver:1.0.1
- docekr push shahabshahab2/airport-apiserver:1.1.0
- docker push shahabshahab2/country-apiserver:1.0.1
# Download kubectl, which is a requirement for using minikube.
- curl -LO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl && chmod +x kubectl && sudo mv kubectl /usr/local/bin/
# Download minikube.
- curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 && chmod +x minikube && sudo mv minikube /usr/local/bin/
- sudo minikube config set memory 4096
- minikube start --extra-config=kubelet.network-plugin=cni --network-plugin=cni
- kubectl apply -f https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/etcd.yaml

# Create rbac for etcd
- kubectl apply -f https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/rbac.yaml

# Grab the hosted (etcd) calico manifest
- curl https://docs.projectcalico.org/v3.2/getting-started/kubernetes/installation/hosted/calico.yaml -O

# Edit the manifest to make "etcd_endpoints" point to the etcd server you just installed. 
#NOTE - this command needs to be adjusted with your etcd endpoint IP address
- sed -i -e "s/10\.96\.232\.136/$(kubectl get service -o json --namespace=kube-system calico-etcd | jq  -r .spec.clusterIP)/" calico.yaml

# Apply your edited calico.yaml
- kubectl apply -f deployment/kube-addons/ 
# Fix the kubectl context, as it's often stale.
- minikube update-context
- minikube addons enable ingress
# Wait for Kubernetes to be up and ready.
- JSONPATH='{range .items[*]}{@.metadata.name}:{range @.status.conditions[*]}{@.type}={@.status};{end}{end}'; until kubectl get nodes -o jsonpath="$JSONPATH" 2>&1 | grep -q "Ready=True"; do sleep 1; done

script:
- kubectl cluster-info
- /bin/bash start-travis.sh