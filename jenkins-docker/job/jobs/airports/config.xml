<?xml version='1.0' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@2.9">
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <hudson.model.ParametersDefinitionProperty>
      <parameterDefinitions>
        <hudson.model.StringParameterDefinition>
          <name>VERSION</name>
          <description></description>
          <defaultValue>1.0.1</defaultValue>
        </hudson.model.StringParameterDefinition>
      </parameterDefinitions>
    </hudson.model.ParametersDefinitionProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers/>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@2.23">
    <script>
pipeline {
  environment {
    registry = &quot;shahabshahab2/airport-apiserver&quot;
    registryCredential = &quot;dockerhub&quot;
    dockerImage = &apos;airport-apiserver&apos;
  }
  agent any
  stages {
    stage(&apos;STG: Git Fetch&apos;) {
      steps {
        git &apos;https://github.com/shahabshahab2/lunatech.git&apos;

      }
    }
  stage(&apos;STG: Build image&apos;) {
      steps{
        script {
          dockerImage = docker.build registry + &quot;:$VERSION&quot;
        }
      }
    }
    stage(&apos;STG: Deploy Image&apos;) {
      steps{
         script {
            docker.withRegistry( &apos;&apos;, registryCredential ) {
            dockerImage.push()
          }
        }
      }
    }
    stage(&apos;STG: Create Namespace&apos;){
      steps{
        script{
          sh &apos;kubectl apply -f deployments4jenkins/0-namespace.yaml&apos;
        }
      }
    }
    stage(&apos;STG: Integration&apos;){
      steps{
        script{
          //Set latest docker tag
          sh &apos;sed -i s,VERSION,${VERSION},g deployments4jenkins/airports&apos;
          //Send to the cluster
          sh &apos;kubectl apply -f deployments4jenkins/airports&apos;

          }
      }
    }
    stage(&apos;Production&apos;){
      steps{
        script{
          //update deployment manifests with latest docker tag
          sh &apos;sed -i s,BUILD_ID,${VERSION},g deployments4jenkins/airports/airport-apiserver-deploy.yaml&apos;
          //deploy on cluster
          sh &apos;kubectl apply -f deployments4jenkins/airports/&apos;


          //Gathering ELB app&apos;s external IP address
             def ip = &apos;&apos;
             def count = 0
             def countLimit = 10


        }
      }
    }
  }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
</flow-definition>